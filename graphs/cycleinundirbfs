class Pair{
    int first;
    int second;
    Pair(int _first,int _second){
        this.first = _first;
        this.second = _second;
    }
}
class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        int vis [] = new int [V];
        for (int i = 0; i<V ; i++){
            if (vis[i] == 0){
               if ( bfs(i,vis,adj) ) return true;
            }
        }return false;
    }
    public boolean bfs(int node, int[] vis , ArrayList<ArrayList<Integer>> adj ){
        Queue <Pair> q = new LinkedList<>();
        q.offer (new Pair(node , -1));
        vis[node] = 1;
        while (!q.isEmpty()){
            int nval = q.peek().first;
            int pval = q.peek().second;
            q.poll();
            for (int adjnode : adj.get(nval)){
                if (vis[adjnode] == 0){
                    vis[adjnode] = 1;
                    q.offer (new Pair(adjnode , nval));
                    
                }
                else if (pval != adjnode ) return true;
            }
        }return false;
        
        
    }
}
