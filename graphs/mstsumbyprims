class Pair {
    int distance ;
    int node ;
    Pair(int _distance , int _node ){
        this.node = _node ;
        this.distance =_distance ;
        
    }
}
class Solution{
	static int spanningTree(int V, int E, int edges[][]){
	    // Code Here. ds requried priority queue ,visted array ,sum var ,arraylist of arraylist of  integer mst
	      PriorityQueue <Pair> pq = new PriorityQueue <Pair>((x,y) -> x.distance - y.distance);
	     // PriorityQueue<Pair> pq =  new PriorityQueue<Pair>((x,y) -> x.distance - y.distance);
	    int [] vis = new int [V] ;
	    int sum = 0;
	    //convert matrix to adj list
	   ArrayList <ArrayList<Pair>> ls = new ArrayList <> ();
	   for (int i = 0 ; i < V ; i++){
	       ls.add(new ArrayList<Pair>());
	   }
        for (int i []  : edges ){
            int u = i[0] ;
            int v = i[1] ;
            int d = i[2] ;
            ls.get(u).add(new Pair(d,v));
            ls.get(v).add(new Pair(d,u));
            
        }	       
	    pq.offer ( new Pair(0,0)) ;
	    while (!pq.isEmpty()){
	        int distance = pq.peek().distance ;
	        int node = pq.peek().node ;
	        pq.poll() ;
	       // System .out .println (distance +"  "+ node);
	        
	        if (vis[node] == 1 ) continue ;
	        vis [node] = 1;
	        sum = sum + distance;
	     
	        //look for adjacent nodes
	        for ( Pair i : ls.get(node)) {
	            int adjdist = i.distance;
	            int adjnode = i.node;
	            if (vis[adjnode] == 0 ){
	                 pq.offer(new Pair (adjdist , adjnode));
	            }
	        }
	    }return sum;
	}
}
